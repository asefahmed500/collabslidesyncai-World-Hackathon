
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user's ID
    function getUid() {
      return request.auth.uid;
    }
    
    // Helper function to check if the user is the creator of a document
    function isCreator(docData) {
      return isAuthenticated() && getUid() == docData.creatorId;
    }

    // Helper function to check if the user has explicit access (owner, editor, viewer)
    function hasExplicitAccess(docData, role) {
      return isAuthenticated() && docData.access[getUid()] == role;
    }
    
    function hasAnyExplicitAccess(docData) {
      return isAuthenticated() && (docData.access[getUid()] == 'owner' || docData.access[getUid()] == 'editor' || docData.access[getUid()] == 'viewer');
    }

    // Helper function to check team access (requires custom claims on auth token)
    function isTeamMember(docData) {
      // IMPORTANT: This requires you to set a 'teamId' custom claim on the user's auth token
      // when they are part of a team.
      return isAuthenticated() && request.auth.token.teamId == docData.teamId;
    }
    
    // Helper function to check if user is team owner or admin (requires custom claims)
    function isTeamAdminOrOwner(docData) {
       return isAuthenticated() && isTeamMember(docData) && (request.auth.token.teamRole == 'admin' || request.auth.token.teamRole == 'owner');
    }

    // Presentations Collection
    match /presentations/{presentationId} {
      // Read Access:
      // 1. If presentation is public
      // 2. If user is authenticated and is the creator
      // 3. If user is authenticated and has explicit access (owner, editor, viewer)
      // 4. If user is authenticated and is part of the team the presentation belongs to (via custom claim)
      allow read: if resource.data.settings.isPublic == true ||
                     isCreator(resource.data) ||
                     hasAnyExplicitAccess(resource.data) ||
                     (resource.data.teamId != null && isTeamMember(resource.data));

      // Create Access:
      // User must be authenticated to create.
      // Ensure creatorId is set to the authenticated user's UID.
      // Ensure access map correctly sets creator as owner.
      // Ensure basic fields are present.
      allow create: if isAuthenticated() &&
                       request.resource.data.creatorId == getUid() &&
                       request.resource.data.access[getUid()] == 'owner' &&
                       request.resource.data.title is string &&
                       request.resource.data.slides is list &&
                       request.resource.data.slides.size() >= 0 && // Allow empty initially, first slide added after creation
                       request.resource.data.settings.isPublic is bool;


      // Update Access:
      // 1. If user is creator or has 'owner' or 'editor' role in access map.
      // 2. Allow any authenticated user to update their own presence in 'activeCollaborators'.
      // 3. Validate data types and structure.
      allow update: if (isCreator(resource.data) || hasExplicitAccess(resource.data, 'owner') || hasExplicitAccess(resource.data, 'editor')) &&
                       (request.resource.data.title is string || request.resource.data.title == resource.data.title) &&
                       (request.resource.data.slides is list || request.resource.data.slides == resource.data.slides) &&
                       (request.resource.data.settings.isPublic is bool || request.resource.data.settings.isPublic == resource.data.settings.isPublic) &&
                       (request.resource.data.access is map || request.resource.data.access == resource.data.access)
                     || (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['activeCollaborators.' + getUid()]));


      // Delete Access:
      // Only creator can delete.
      allow delete: if isCreator(resource.data);
    }

    // Assets Collection
    match /assets/{assetId} {
      // Read Access:
      // 1. If user is authenticated and asset belongs to their team (via custom claim).
      // 2. If user is authenticated and is the uploader of the asset.
      allow read: if isAuthenticated() && (isTeamMember(resource.data) || resource.data.uploaderId == getUid());

      // Create Access:
      // User must be authenticated.
      // UploaderId must be their own UID.
      // TeamId must be present and should match user's team (if checking via custom claim).
      allow create: if isAuthenticated() &&
                       request.resource.data.uploaderId == getUid() &&
                       request.resource.data.teamId != null &&
                       request.resource.data.fileName is string &&
                       request.resource.data.size is number && request.resource.data.size > 0 && request.resource.data.size <= 5 * 1024 * 1024; // Max 5MB

      // Update Access: (Generally, asset metadata might not be frequently updated. Define if needed)
      // Typically uploader or team admin might update tags or description.
      allow update: if isAuthenticated() && (resource.data.uploaderId == getUid() || isTeamAdminOrOwner(resource.data)) &&
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tags', 'description', 'lastUpdatedAt']));


      // Delete Access:
      // Uploader or team admin/owner can delete.
      allow delete: if isAuthenticated() && (resource.data.uploaderId == getUid() || isTeamAdminOrOwner(resource.data));
    }
    
    // Presentation Activities Collection
    match /presentationActivities/{activityId} {
      // Read Access: Authenticated users can read activities (could be refined to presentation members)
      allow read: if isAuthenticated();
      
      // Create Access: Authenticated users (typically the system acting on behalf of a user) can create.
      // ActorId should match the authenticated user.
      allow create: if isAuthenticated() && request.resource.data.actorId == getUid();

      // No updates or deletes typically
      allow update, delete: if false;
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == getUid();
      allow create: if isAuthenticated(); // Server (actions/functions) will create with correct userId
      allow update: if isAuthenticated() && resource.data.userId == getUid() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if false; // Or allow user to delete their own read notifications
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

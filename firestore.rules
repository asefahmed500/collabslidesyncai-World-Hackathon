
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Placeholder: Replace with custom claims for robust admin check
    function isAdmin() {
      // Example: return request.auth.token.isAppAdmin == true;
      // For development, you might temporarily allow a specific UID:
      // return request.auth.uid == "YOUR_ADMIN_UID_FOR_TESTING";
      return isAuthenticated(); // TEMPORARY: Allows any authenticated user as admin for easier dev
    }

    function isPresentationCreator(presentation) {
      return isUser(presentation.data.creatorId);
    }

    function hasPresentationAccess(presentation, role) {
      return presentation.data.access[request.auth.uid] == role;
    }
    
    function isPresentationTeamMember(presentation) {
      // This is a simplified check. Ideally, use custom claims or read /teams/{teamId}
      // For now, assuming team access is granted if presentation has a teamId and user is authenticated
      // and is part of that team (which rules can't directly check across collections easily without claims).
      // This part needs to be secured properly with custom claims or more complex rules.
      return isAuthenticated() && presentation.data.teamId != null;
    }

    function canViewPresentation(presentation) {
      return presentation.data.moderationStatus != 'taken_down' && (
        presentation.data.settings.isPublic ||
        isPresentationCreator(presentation) ||
        hasPresentationAccess(presentation, 'owner') ||
        hasPresentationAccess(presentation, 'editor') ||
        hasPresentationAccess(presentation, 'viewer') ||
        isPresentationTeamMember(presentation) || // Add team access check
        isAdmin() // Admins can view any non-deleted presentation
      );
    }

    function canEditPresentation(presentation) {
       return presentation.data.moderationStatus != 'taken_down' && (
        isPresentationCreator(presentation) ||
        hasPresentationAccess(presentation, 'owner') ||
        hasPresentationAccess(presentation, 'editor') ||
        isAdmin() // Admins can edit
      );
    }

    // Presentations
    match /presentations/{presentationId} {
      allow read: if resource.data.deleted == false && canViewPresentation(resource);
      
      allow create: if isAuthenticated() && request.resource.data.creatorId == request.auth.uid;
                     // Add validation for required fields on create
                     // e.g. && request.resource.data.title is string
                     // && request.resource.data.slides is list
                     // && request.resource.data.access[request.auth.uid] == 'owner'

      allow update: if resource.data.deleted == false && (
                      (canEditPresentation(resource) && request.resource.data.moderationStatus != 'taken_down') ||
                      (isAdmin() && ( // Admins can update moderation status or taken-down content
                        request.resource.data.moderationStatus != resource.data.moderationStatus ||
                        request.resource.data.moderationNotes != resource.data.moderationNotes ||
                        resource.data.moderationStatus == 'taken_down'
                      ))
                    );
                    // Add more granular field validation for updates
                    // e.g. ensure only specific roles can change specific fields.
                    // Ensure 'creatorId' cannot be changed after creation.
                    // Ensure 'moderationStatus' can only be changed by admins, etc.

      // Soft delete: only creator or owner in access map, or admin
      allow delete: if resource.data.deleted == false && (
                      isPresentationCreator(resource) || 
                      hasPresentationAccess(resource, 'owner') || 
                      isAdmin()
                    );
      // True permanent delete should be handled by backend with admin privileges
    }

    // Presentation Activities
    match /presentationActivities/{activityId} {
      allow read: if isAuthenticated(); // Or more specific (e.g., involved users)
      allow create: if isAuthenticated(); // Typically backend/server-side
      allow update, delete: if false; // Activities are usually immutable
    }

    // Assets
    match /assets/{assetId} {
      allow create: if isAuthenticated() 
                     && request.resource.data.uploaderId == request.auth.uid
                     && request.resource.data.teamId is string; // Ensure teamId is provided
                     // Add validation for file size, type, etc.

      allow read: if isAuthenticated(); 
                  // Ideally, check if user is part of resource.data.teamId
                  // Example: get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.members[request.auth.uid] != null
                  // This adds read cost and complexity. Custom claims are better for this.

      // Allow update only for tags or description by uploader or team admin (complex)
      allow update: if isAuthenticated() && 
                      (isUser(resource.data.uploaderId) || isAdmin()); // Simplified: Uploader or Admin
                      // Add field-specific write rules for what can be updated

      allow delete: if isAuthenticated() && 
                      (isUser(resource.data.uploaderId) || isAdmin()); // Simplified: Uploader or Admin
    }

    // Notifications (user-specific)
    match /notifications/{notificationId} {
      allow read, update: if isUser(resource.data.userId); // User can read/update their own notifications (e.g., mark as read)
      allow create: if isAuthenticated(); // System/backend creates notifications
      allow delete: if isUser(resource.data.userId); // User can delete their own notifications
    }

    // Feedback Submissions
    match /feedbackSubmissions/{submissionId} {
      allow create: if true; // Anyone can submit feedback (or isAuthenticated())
      allow read, update, delete: if isAdmin(); // Only admins can manage feedback
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

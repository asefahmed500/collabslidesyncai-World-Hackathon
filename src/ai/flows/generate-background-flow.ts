
'use server';
/**
 * @fileOverview An AI flow for generating slide background images.
 *
 * - generateBackground - A function that generates a background image.
 * - GenerateBackgroundInput - The input type for the generateBackground function.
 * - GenerateBackgroundOutput - The return type for the generateBackground function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const GenerateBackgroundInputSchema = z.object({
  description: z.string().describe('A description of the desired background (e.g., "abstract blue waves", "minimalist dark geometric pattern", "sunset over mountains"). Keep it descriptive but concise.'),
  stylePrompt: z.string().optional().describe('Optional style prompt (e.g., "watercolor", "photorealistic", "vector art").'),
});
export type GenerateBackgroundInput = z.infer<typeof GenerateBackgroundInputSchema>;

export const GenerateBackgroundOutputSchema = z.object({
  imageDataUri: z.string().describe("The generated background image as a data URI (e.g., 'data:image/png;base64,...'). Null if generation failed."),
  feedback: z.string().optional().describe("Feedback or reason if image generation failed or has issues."),
});
export type GenerateBackgroundOutput = z.infer<typeof GenerateBackgroundOutputSchema>;

export async function generateBackground(input: GenerateBackgroundInput): Promise<GenerateBackgroundOutput> {
  return generateBackgroundFlow(input);
}

const generateBackgroundFlow = ai.defineFlow(
  {
    name: 'generateBackgroundFlow',
    inputSchema: GenerateBackgroundInputSchema,
    outputSchema: GenerateBackgroundOutputSchema,
  },
  async (input: GenerateBackgroundInput) => {
    if (!input.description.trim()) {
      return { imageDataUri: "", feedback: "Description cannot be empty." };
    }

    try {
      let fullPrompt = `Generate a visually appealing background image suitable for a presentation slide. The background should generally be subtle enough not to overpower text content. Description: "${input.description}".`;
      if (input.stylePrompt) {
        fullPrompt += ` Style: "${input.stylePrompt}".`;
      }
      fullPrompt += ` Avoid text or complex logos in the image. Focus on patterns, textures, or scenic views that are not too distracting. Aspect ratio should be 16:9 if possible.`


      const {media, finishReason, text} = await ai.generate({
        model: 'googleai/gemini-2.0-flash-exp', 
        prompt: fullPrompt,
        config: {
          responseModalities: ['IMAGE', 'TEXT'], 
          // Safety settings can be adjusted if needed
          safetySettings: [
            { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_LOW_AND_ABOVE' },
            { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          ],
          // candidateCount: 1, // Usually default, but can be explicit
        },
      });
      
      if (finishReason === "BLOCKED" || finishReason === "ERROR" || finishReason === "UNKNOWN" || finishReason === "OTHER"){
         const feedbackMessage = text ? `Model feedback: ${text}` : `Image generation failed. Reason: ${finishReason}.`;
         return { imageDataUri: "", feedback: feedbackMessage };
      }

      if (media && media.url) {
        return { imageDataUri: media.url };
      } else {
        return { imageDataUri: "", feedback: text || "No image was generated by the model." };
      }
    } catch (error: any) {
      console.error("Error generating background image:", error);
      return { imageDataUri: "", feedback: `An error occurred: ${error.message || 'Unknown error'}` };
    }
  }
);

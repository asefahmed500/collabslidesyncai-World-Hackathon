
'use server';
/**
 * @fileOverview An AI flow for the chatbot assistant.
 *
 * - chatbotAssistantFlow - A function that handles chat interactions.
 * - ChatbotAssistantInputSchema - The input type for the chatbotAssistantFlow function.
 * - ChatbotAssistantOutputSchema - The return type for the chatbotAssistantFlow function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const ChatbotAssistantInputSchema = z.object({
  userMessage: z.string().describe('The message sent by the user to the chatbot.'),
  // Optional: Add conversation history if you want the bot to be stateful
  // conversationHistory: z.array(z.object({ sender: z.enum(['user', 'bot']), text: z.string() })).optional(),
});
export type ChatbotAssistantInput = z.infer<typeof ChatbotAssistantInputSchema>;

export const ChatbotAssistantOutputSchema = z.object({
  botResponse: z.string().describe('The response generated by the AI chatbot.'),
});
export type ChatbotAssistantOutput = z.infer<typeof ChatbotAssistantOutputSchema>;

export async function chatbotAssistant(input: ChatbotAssistantInput): Promise<ChatbotAssistantOutput> {
  return chatbotAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'chatbotAssistantPrompt',
  input: {schema: ChatbotAssistantInputSchema},
  output: {schema: ChatbotAssistantOutputSchema},
  prompt: `You are the CollabSlideSyncAI Assistant, a friendly and helpful AI designed to assist users with the CollabSlideSyncAI presentation application.

Your capabilities include:
- Answering questions about CollabSlideSyncAI features (e.g., "How do I share a presentation?", "Can I add images?").
- Providing general tips for creating effective presentations.
- Explaining how to use different parts of the application.

Keep your responses concise, clear, and friendly.
If you don't know the answer to a specific question, politely say so and suggest the user check the FAQ section or contact support for more complex issues.
Do not make up features or information.

User's message:
{{{userMessage}}}

Your response (as botResponse):
`,
});

const chatbotAssistantFlow = ai.defineFlow(
  {
    name: 'chatbotAssistantFlow',
    inputSchema: ChatbotAssistantInputSchema,
    outputSchema: ChatbotAssistantOutputSchema,
  },
  async (input: ChatbotAssistantInput) => {
    const {output} = await prompt(input);
    if (!output || !output.botResponse) {
      return { botResponse: "I'm sorry, I encountered an issue trying to respond. Please try again." };
    }
    return output;
  }
);
